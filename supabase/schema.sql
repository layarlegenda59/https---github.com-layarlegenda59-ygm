-- Create debtors table
create table
  debtors (
    id uuid not null default gen_random_uuid (),
    created_at timestamp with time zone not null default now(),
    name character varying not null,
    phone character varying not null,
    email character varying,
    total_debt numeric not null,
    due_date date not null,
    funder_due_date date not null,
    status character varying not null,
    leasing_bpkb character varying,
    funder character varying,
    police_number character varying,
    user_id uuid null,
    constraint debtors_pkey primary key (id),
    constraint debtors_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  );

-- RLS for debtors table
alter table debtors enable row level security;
create policy "Users can view their own debtors" on debtors for select using (auth.uid() = user_id);
create policy "Users can insert their own debtors" on debtors for insert with check (auth.uid() = user_id);
create policy "Users can update their own debtors" on debtors for update using (auth.uid() = user_id);
create policy "Users can delete their own debtors" on debtors for delete using (auth.uid() = user_id);


-- Create notification_logs table
create table
  notification_logs (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    debtor_id uuid not null,
    notification_type character varying not null,
    status character varying not null,
    error_message text,
    user_id uuid not null,
    constraint notification_logs_pkey primary key (id),
    constraint notification_logs_debtor_id_fkey foreign key (debtor_id) references debtors (id) on delete cascade,
    constraint notification_logs_user_id_fkey foreign key (user_id) references auth.users (id) on delete cascade
  );

-- RLS for notification_logs table
alter table notification_logs enable row level security;
create policy "Users can manage their own notification logs" on notification_logs for all using (auth.uid() = user_id);

-- Function to set user_id on new debtor
create function public.handle_new_debtor()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  update public.debtors
  set user_id = auth.uid()
  where id = new.id;
  return new;
end;
$$;

-- Trigger to call the function
create trigger on_debtor_created
  after insert on public.debtors
  for each row execute procedure public.handle_new_debtor();
